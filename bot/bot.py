import os
import asyncio
import nest_asyncio
import logging
from dotenv import load_dotenv
from telegram.request import HTTPXRequest
from telegram import Update, BotCommand, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes

from utils.tournament_cache_reader import (
    get_upcoming_matches,
    get_live_matches,
    get_recent_matches,
    get_tournament_name_by_id,
)
from utils.pandascore import format_time_until
from db import (
    init_db,
    add_subscriber,
    update_is_active,
    get_subscriber_tier,
    is_subscriber_active,
    update_tier,
)
from utils.logging_config import setup_logging

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
if not TELEGRAM_BOT_TOKEN:
    raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω TELEGRAM_BOT_TOKEN –≤ .env")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
init_db()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
os.makedirs("logs", exist_ok=True)
setup_logging()
logger = logging.getLogger("bot")

# --- –ö–æ–º–∞–Ω–¥—ã ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_chat.id
    add_subscriber(user_id, tier="sa")
    update_is_active(user_id, True)
    logger.info(f"/start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è CS2 –º–∞—Ç—á–µ–π. –¢—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –º–∞—Ç—á–∞—Ö —Ç–æ–ø-—Ç—É—Ä–Ω–∏—Ä–æ–≤ (S –∏ A tier).\n\n"
        "–í–≤–µ–¥–∏ /next, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–ª–∏–∂–∞–π—à–∏–µ –º–∞—Ç—á–∏."
    )

async def send_match(update: Update, context: ContextTypes.DEFAULT_TYPE, match: dict, prefix: str):
    user_id = update.effective_chat.id
    league = match.get("league", "?")
    tournament = get_tournament_name_by_id(match.get("tournament_id")) or "?"
    team_1 = match.get("team_1", {}).get("acronym") or match.get("team_1", {}).get("name") or "?"
    team_2 = match.get("team_2", {}).get("acronym") or match.get("team_2", {}).get("name") or "?"
    teams = f"{team_1} vs {team_2}"
    stream_url = match.get("stream_url")
    time_until = format_time_until(match.get("begin_at"))

    message = f"<b>{prefix}</b>\n<b>–¢—É—Ä–Ω–∏—Ä:</b> {league} | {tournament}"

    if match.get("status") == "finished":
        message += f"\n<b>–ú–∞—Ç—á:</b> {teams}\nüèÜ <b>–ü–æ–±–µ–¥–∏—Ç–µ–ª—å ID:</b> {match.get('winner_id', '?')}"
        keyboard = None
    elif not stream_url:
        message += f"\n<b>–ú–∞—Ç—á:</b> {teams}\n<b>–ù–∞—á–Ω—ë—Ç—Å—è —á–µ—Ä–µ–∑:</b> {time_until}\n‚ö†Ô∏è <i>–¢—Ä–∞–Ω—Å–ª—è—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç</i>"
        keyboard = None
    else:
        message += f"\n<b>–ù–∞—á–Ω—ë—Ç—Å—è —á–µ—Ä–µ–∑:</b> {time_until}"
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton(text=f"üü™ {teams}", url=stream_url)]
        ])

    await context.bot.send_message(
        chat_id=user_id,
        text=message,
        parse_mode="HTML",
        reply_markup=keyboard
    )

async def next_matches(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_chat.id
    tier = get_subscriber_tier(user_id) or "all"
    matches = get_upcoming_matches(tier=tier, limit=8)

    if not matches:
        await update.message.reply_text("–ù–µ—Ç –±–ª–∏–∂–∞–π—à–∏—Ö –º–∞—Ç—á–µ–π.")
        return

    for match in matches:
        await send_match(update, context, match, "‚è≥ –ë–ª–∏–∂–∞–π—à–∏–π –º–∞—Ç—á")

async def live_matches(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_chat.id
    tier = get_subscriber_tier(user_id) or "all"
    matches = get_live_matches(tier=tier, limit=8)

    if not matches:
        await update.message.reply_text("–°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∞—Ç—á–µ–π.")
        return

    for match in matches:
        await send_match(update, context, match, "üî¥ LIVE")

async def recent_matches(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_chat.id
    tier = get_subscriber_tier(user_id) or "all"
    matches = get_recent_matches(tier=tier, limit=8)

    if not matches:
        await update.message.reply_text("–ù–µ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π.")
        return

    for match in matches:
        await send_match(update, context, match, "üèÅ –ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–π –º–∞—Ç—á")

async def subscribe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_chat.id
    add_subscriber(user_id, tier="sa")
    update_is_active(user_id, True)
    await update.message.reply_text("–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±–ª–∏–∂–∞–π—à–∏—Ö –º–∞—Ç—á–∞—Ö S –∏ A-tier —Ç—É—Ä–Ω–∏—Ä–æ–≤.")

async def unsubscribe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_chat.id
    update_is_active(user_id, False)
    await update.message.reply_text("–í—ã –æ—Ç–ø–∏—Å–∞–Ω—ã –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")

async def subscribe_all(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_chat.id
    add_subscriber(user_id, tier="all")
    update_is_active(user_id, True)
    await update.message.reply_text("–¢–µ–ø–µ—Ä—å –≤—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—Å–µ –º–∞—Ç—á–∏ (–≤–∫–ª—é—á–∞—è B, C –∏ D —Ç—É—Ä–Ω–∏—Ä—ã).")

async def set_bot_commands(app):
    commands = [
        BotCommand("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è"),
        BotCommand("next", "–ü–æ–∫–∞–∑–∞—Ç—å –±–ª–∏–∂–∞–π—à–∏–µ –º–∞—Ç—á–∏"),
        BotCommand("live", "–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –º–∞—Ç—á–∏"),
        BotCommand("recent", "–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –º–∞—Ç—á–∏"),
        BotCommand("subscribe", "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"),
        BotCommand("unsubscribe", "–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"),
        BotCommand("subscribe_all", "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≤—Å–µ –º–∞—Ç—á–∏ –≤—Å–µ—Ö —É—Ä–æ–≤–Ω–µ–π"),
    ]
    await app.bot.set_my_commands(commands)

async def main():
    request = HTTPXRequest(connect_timeout=15.0, read_timeout=30.0)
    app = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).request(request).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("next", next_matches))
    app.add_handler(CommandHandler("live", live_matches))
    app.add_handler(CommandHandler("recent", recent_matches))
    app.add_handler(CommandHandler("subscribe", subscribe))
    app.add_handler(CommandHandler("unsubscribe", unsubscribe))
    app.add_handler(CommandHandler("subscribe_all", subscribe_all))

    await set_bot_commands(app)
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await app.run_polling()

nest_asyncio.apply()

if __name__ == "__main__":
    asyncio.get_event_loop().run_until_complete(main())