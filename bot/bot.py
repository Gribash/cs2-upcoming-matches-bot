import os
import asyncio
import nest_asyncio
import logging
from dotenv import load_dotenv
from telegram.request import HTTPXRequest
from telegram import Update, BotCommand, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes

# –ò–º–ø–æ—Ä—Ç —É—Ç–∏–ª–∏—Ç
from utils.pandascore import get_upcoming_cs2_matches, get_recent_cs2_matches, get_live_cs2_matches
from db import (
    init_db,
    add_subscriber,
    update_is_active,
    get_subscriber_tier,
    is_subscriber_active,
    update_tier,
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
init_db()

# –£–±–µ–¥–∏—Å—å, —á—Ç–æ –ø–∞–ø–∫–∞ –¥–ª—è –ª–æ–≥–æ–≤ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
os.makedirs("logs", exist_ok=True)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[
        logging.FileHandler("logs/bot.log"),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_chat.id
    add_subscriber(user_id, tier="sa")
    update_is_active(user_id, True)
    logger.info(f"/start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è CS2 –º–∞—Ç—á–µ–π. –¢—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –º–∞—Ç—á–∞—Ö —Ç–æ–ø-—Ç—É—Ä–Ω–∏—Ä–æ–≤ (S –∏ A tier).\n\n"
        "–í–≤–µ–¥–∏ /next, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–ª–∏–∂–∞–π—à–∏–µ –º–∞—Ç—á–∏."
    )

# –ö–æ–º–∞–Ω–¥–∞ /live
async def live_matches(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_chat.id
    logger.info(f"/live –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    tier = get_subscriber_tier(user_id)
    logger.info(f"Tier –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {tier}")
    matches = await get_live_cs2_matches(tier=tier)

    logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(matches)} live –º–∞—Ç—á–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    if not matches:
        await update.message.reply_text("–°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∞—Ç—á–µ–π.")
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ 8 –º–∞—Ç—á–µ–π
    for match in matches[:8]:
        league = match.get("league", "–ë–µ–∑ –ª–∏–≥–∏")
        tournament = match.get("tournament", "–ë–µ–∑ —Ç—É—Ä–Ω–∏—Ä–∞")
        teams = match.get("teams", "–ö–æ–º–∞–Ω–¥—ã –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã")
        stream_url = match.get("stream_url")

        logger.info(f"LIVE –º–∞—Ç—á: {league} | {tournament} | {teams} | {stream_url}")

        # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥
        message_text = (
            f"<b>LIVE üî¥</b>\n"
            f"<b>–¢—É—Ä–Ω–∏—Ä:</b> {league} | {tournament}"
        )

        # –ö–Ω–æ–ø–∫–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –º–∞—Ç—á–∞
        if stream_url:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text=f"{teams}", url=stream_url)]
            ])
        else:
            keyboard = None

        await context.bot.send_message(
            chat_id=user_id,
            text=message_text,
            parse_mode="HTML",
            reply_markup=keyboard
        )

# –ö–æ–º–∞–Ω–¥–∞ /next
async def next_matches(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_chat.id
    logger.info(f"/next –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    tier = get_subscriber_tier(user_id)
    logger.info(f"Tier –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {tier}")
    matches = await get_upcoming_cs2_matches(limit=8, tier=tier)

    logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(matches)} –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–∞—Ç—á–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    if not matches:
        await update.message.reply_text("–ù–µ—Ç –±–ª–∏–∂–∞–π—à–∏—Ö –º–∞—Ç—á–µ–π.")
        return

    msg = "Upcoming matchesüîú\n"
    for match in matches:
        logger.info(f"–ú–∞—Ç—á: {match['league']} | {match['tournament']} | {match['teams']} | {match['begin_at']}")
        msg += (
            f"\nüü£ {match['league']} | {match['tournament']} \n"
            f"üÜö {match['teams']}\n"
            f"‚è≥ {match['time_until']}\n"
            f"üñ• {match['stream_url']}\n"
        )

    await update.message.reply_text(msg)

# –ö–æ–º–∞–Ω–¥–∞ /recent
async def recent_matches(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_chat.id
    logger.info(f"/recent –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    tier = get_subscriber_tier(user_id)
    logger.info(f"Tier –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {tier}")
    matches = await get_recent_cs2_matches(limit=8, tier=tier)

    logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(matches)} –ø—Ä–æ—à–µ–¥—à–∏—Ö –º–∞—Ç—á–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    if not matches:
        await update.message.reply_text("–ù–µ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π.")
        return

    msg = "Recent matchesüèÅ\n"
    for match in matches:
        logger.info(f"–ü—Ä–æ—à–µ–¥—à–∏–π –º–∞—Ç—á: {match['league']} | {match['tournament']} | {match['teams']} | –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {match['winner']}")
        msg += (
            f"\nüÜö {match['teams']}\n"
            f"üü£ {match['league']} | {match['tournament']}\n"
            f"üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {match['winner']}\n"
        )

    await update.message.reply_text(msg)

# –ö–æ–º–∞–Ω–¥–∞ /subscribe
async def subscribe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_chat.id
    add_subscriber(user_id, tier='sa')
    update_is_active(user_id, True)
    logger.info(f"/subscribe –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    await update.message.reply_text("–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±–ª–∏–∂–∞–π—à–∏—Ö –º–∞—Ç—á–∞—Ö S –∏ A-tier —Ç—É—Ä–Ω–∏—Ä–æ–≤.")

# –ö–æ–º–∞–Ω–¥–∞ /unsubscribe
async def unsubscribe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_chat.id
    update_is_active(user_id, False)
    logger.info(f"/unsubscribe –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    await update.message.reply_text("–í—ã –æ—Ç–ø–∏—Å–∞–Ω—ã –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")

# –ö–æ–º–∞–Ω–¥–∞ /subscribe_all
async def subscribe_all(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_chat.id
    add_subscriber(user_id, tier="all")
    update_is_active(user_id, True)
    update_tier(user_id, "all")
    logger.info(f"/subscribe_all –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    await update.message.reply_text("–¢–µ–ø–µ—Ä—å –≤—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—Å–µ –º–∞—Ç—á–∏ (–≤–∫–ª—é—á–∞—è B, C –∏ D —Ç—É—Ä–Ω–∏—Ä—ã).")

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥
async def set_bot_commands(app):
    commands = [
        BotCommand("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è"),
        BotCommand("next", "–ü–æ–∫–∞–∑–∞—Ç—å –±–ª–∏–∂–∞–π—à–∏–µ –º–∞—Ç—á–∏"),
        BotCommand("live", "–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –º–∞—Ç—á–∏"),
        BotCommand("recent", "–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –º–∞—Ç—á–∏"),
        BotCommand("subscribe", "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"),
        BotCommand("unsubscribe", "–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"),
        BotCommand("subscribe_all", "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≤—Å–µ –º–∞—Ç—á–∏ –≤—Å–µ—Ö —É—Ä–æ–≤–Ω–µ–π"),
    ]
    await app.bot.set_my_commands(commands)

# –ì–ª–∞–≤–Ω—ã–π –∑–∞–ø—É—Å–∫
async def main():
    request = HTTPXRequest(connect_timeout=15.0, read_timeout=20.0)
    app = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).request(request).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("next", next_matches))
    app.add_handler(CommandHandler("subscribe", subscribe))
    app.add_handler(CommandHandler("unsubscribe", unsubscribe))
    app.add_handler(CommandHandler("subscribe_all", subscribe_all))
    app.add_handler(CommandHandler("recent", recent_matches))
    app.add_handler(CommandHandler("live", live_matches))

    await set_bot_commands(app)

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await app.run_polling()

nest_asyncio.apply()

if __name__ == "__main__":
    asyncio.get_event_loop().run_until_complete(main())