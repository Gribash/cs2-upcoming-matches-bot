import sqlite3
import os
import logging
from datetime import datetime, timezone, timedelta
from utils.logging_config import setup_logging

# –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
DB_PATH = "data/subscribers.db"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
setup_logging()
logger = logging.getLogger("db")
logger.setLevel(logging.DEBUG if os.getenv("DEV_MODE") == "true" else logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ —Ç–∞–±–ª–∏—Ü
def init_db():
    os.makedirs("data", exist_ok=True)
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()

    cursor.execute("""
        CREATE TABLE IF NOT EXISTS subscribers (
            user_id INTEGER PRIMARY KEY,
            tier TEXT DEFAULT 'sa' CHECK(tier IN ('sa', 'all')),
            is_active INTEGER DEFAULT 1,
            joined_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            language TEXT DEFAULT 'en'
        );
    """)
    
    cursor.execute("""
        CREATE INDEX IF NOT EXISTS idx_subscribers_active ON subscribers (is_active);
    """)

    # –¢–∞–±–ª–∏—Ü–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –º–∞—Ç—á–∞—Ö
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS notified_matches (
            user_id INTEGER NOT NULL,
            match_id INTEGER NOT NULL,
            notified_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            PRIMARY KEY (user_id, match_id)
        );
    """)

    conn.commit()
    conn.close()
    logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏ —Ç–∞–±–ª–∏—Ü—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã.")

def add_subscriber(user_id: int, tier: str = "sa", language: str = "en"):
    try:
        conn = sqlite3.connect(DB_PATH)
        c = conn.cursor()

        c.execute("""
            INSERT INTO subscribers (user_id, tier, is_active, language)
            VALUES (?, ?, 1, ?)
            ON CONFLICT(user_id) DO UPDATE SET
                tier = excluded.tier,
                is_active = 1
                -- language –ù–ï –û–ë–ù–û–í–õ–Ø–ï–ú!
        """, (user_id, tier, language))

        conn.commit()
        conn.close()
        logger.info(f"–ü–æ–¥–ø–∏—Å—á–∏–∫ {user_id} –¥–æ–±–∞–≤–ª–µ–Ω/–æ–±–Ω–æ–≤–ª—ë–Ω —Å tier={tier}, language={language}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞ {user_id}: {e}")

def remove_subscriber(user_id: int):
    with sqlite3.connect(DB_PATH) as conn:
        logger.info(f"–û—Ç–∫–ª—é—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")
        conn.execute("UPDATE subscribers SET is_active = 0 WHERE user_id = ?", (user_id,))
        conn.commit()
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π.")

def get_all_subscribers() -> list[int]:
    with sqlite3.connect(DB_PATH) as conn:
        cursor = conn.execute("SELECT user_id FROM subscribers WHERE is_active = 1")
        users = [row[0] for row in cursor.fetchall()]
        logger.debug(f"–ü–æ–ª—É—á–µ–Ω–æ {len(users)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∏–∑ –±–∞–∑—ã: {users}")
        return users

def get_subscriber_tier(user_id: int) -> str:
    with sqlite3.connect(DB_PATH) as conn:
        cursor = conn.execute("SELECT tier FROM subscribers WHERE user_id = ?", (user_id,))
        row = cursor.fetchone()
        tier = row[0] if row else "sa"
        logger.debug(f"Tier –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {tier}")
        return tier

def was_notified(user_id: int, match_id: int) -> bool:
    with sqlite3.connect(DB_PATH) as conn:
        cursor = conn.execute(
            "SELECT 1 FROM notified_matches WHERE user_id = ? AND match_id = ?",
            (user_id, match_id)
        )
        result = cursor.fetchone() is not None
        logger.debug(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: user_id={user_id}, match_id={match_id}, result={result}")
        return result

def mark_notified(user_id: int, match_id: int):
    with sqlite3.connect(DB_PATH) as conn:
        conn.execute(
            "INSERT OR IGNORE INTO notified_matches (user_id, match_id) VALUES (?, ?)",
            (user_id, match_id)
        )
        conn.commit()
        logger.info(f"–ü–æ–º–µ—Ç–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–≤–µ–¥–æ–º–ª—ë–Ω –æ –º–∞—Ç—á–µ {match_id}.")

def get_notified_match_ids(user_id: int, days: int = 3) -> set:
    cutoff = datetime.now(timezone.utc) - timedelta(days=days)
    cutoff_str = cutoff.strftime("%Y-%m-%d %H:%M:%S")

    try:
        with sqlite3.connect(DB_PATH) as conn:
            cursor = conn.execute(
                """
                SELECT match_id
                FROM notified_matches
                WHERE user_id = ? AND notified_at >= ?
                """,
                (user_id, cutoff_str)
            )
            match_ids = {row[0] for row in cursor.fetchall()}
            logger.debug(f"üîé –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {days} –¥–Ω–µ–π –¥–ª—è {user_id}: {len(match_ids)} –º–∞—Ç—á–µ–π.")
            return match_ids
    except Exception as e:
        logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ notified_match_ids –¥–ª—è {user_id}: {e}")
        return set()

def mark_notified_bulk(user_match_pairs: list[tuple[int, int]]):
    if not user_match_pairs:
        return

    try:
        with sqlite3.connect(DB_PATH) as conn:
            conn.executemany(
                "INSERT OR IGNORE INTO notified_matches (user_id, match_id) VALUES (?, ?)",
                user_match_pairs
            )
            conn.commit()
            logger.info(f"üì• –î–æ–±–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {len(user_match_pairs)} –∑–∞–ø–∏—Å–µ–π.")
    except Exception as e:
        logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–π –≤—Å—Ç–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")

def update_is_active(user_id: int, is_active: bool):
    with sqlite3.connect(DB_PATH) as conn:
        conn.execute("UPDATE subscribers SET is_active = ? WHERE user_id = ?", (1 if is_active else 0, user_id))
        conn.commit()
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ–±–Ω–æ–≤–ª—ë–Ω: is_active = {is_active}")

def is_subscriber_active(user_id: int) -> bool:
    with sqlite3.connect(DB_PATH) as conn:
        cursor = conn.execute("SELECT is_active FROM subscribers WHERE user_id = ?", (user_id,))
        row = cursor.fetchone()
        result = row is not None and row[0] == 1
        logger.debug(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {result}")
        return result
    
def update_tier(user_id: int, tier: str):
    with sqlite3.connect(DB_PATH) as conn:
        conn.execute(
            "UPDATE subscribers SET tier = ? WHERE user_id = ?",
            (tier, user_id)
        )
        conn.commit()
        logger.info(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–±–Ω–æ–≤–ª—ë–Ω —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ {tier}.")

def create_indexes():
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("""
        CREATE INDEX IF NOT EXISTS idx_user_match
        ON notified_matches(user_id, match_id);
    """)
    conn.commit()
    conn.close()

def get_connection():
    return sqlite3.connect(DB_PATH)

def get_subscriber_language(user_id: int) -> str:
    try:
        with get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT language FROM subscribers WHERE user_id = ?", (user_id,))
            row = cursor.fetchone()
            return row[0] if row and row[0] else "en"
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return "en"


def update_language(user_id: int, language: str):
    try:
        with get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute(
                "UPDATE subscribers SET language = ? WHERE user_id = ?",
                (language, user_id)
            )
            conn.commit()
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

def save_feedback(user_id: int, message: str):
    try:
        with get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute(
                "INSERT INTO feedback_messages (user_id, message) VALUES (?, ?)",
                (user_id, message)
            )
            conn.commit()
            logger.info(f"Feedback –æ—Ç {user_id} —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏")