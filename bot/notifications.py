import os
import asyncio
import logging
from datetime import datetime, timezone
from dotenv import load_dotenv
from db import (
    get_all_subscribers,
    get_notified_match_ids,
    mark_notified,
    get_subscriber_tier
)
from utils.pandascore import get_upcoming_cs2_matches

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
os.makedirs("logs", exist_ok=True)
logging.basicConfig(
    filename="logs/notifications.log",
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
)

logger = logging.getLogger(__name__)

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
async def notify_upcoming_matches(bot):
    try:
        logger.info("üîç –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–∞—Ç—á–µ–π...")

        # –ü–æ–¥–≥—Ä—É–∂–∞–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
        subscribers = get_all_subscribers()
        logger.info(f"üë• –ù–∞–π–¥–µ–Ω–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {len(subscribers)}")

        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ tier
        subs_by_tier = {"sa": [], "all": []}
        for user_id in subscribers:
            tier = get_subscriber_tier(user_id)
            subs_by_tier.setdefault(tier, []).append(user_id)
            logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏–º–µ–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É {tier}")

        logger.info(f"S/A –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {len(subs_by_tier.get('sa', []))}, ALL –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {len(subs_by_tier.get('all', []))}")

        # –ü–æ–ª—É—á–∞–µ–º –º–∞—Ç—á–∏ –ø–æ —É—Ä–æ–≤–Ω—è–º
        matches_by_tier = {
            "sa": await get_upcoming_cs2_matches(limit=10, tier="sa"),
            "all": await get_upcoming_cs2_matches(limit=10, tier="all")
        }

        now = datetime.now(timezone.utc)
        logger.info(f"üïí –¢–µ–∫—É—â–µ–µ UTC –≤—Ä–µ–º—è: {now.isoformat()}")

        for tier, matches in matches_by_tier.items():
            logger.info(f"üì¶ –ü–æ–ª—É—á–µ–Ω–æ {len(matches)} –º–∞—Ç—á–µ–π –¥–ª—è tier={tier}")
            for match in matches:
                match_id = match.get("id")
                begin_at = match.get("begin_at")

                logger.info(f"[{tier.upper()}] –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞—Ç—á–∞ {match_id} | –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {begin_at}")
                logger.debug(f"–ú–∞—Ç—á: {match}")

                if not begin_at:
                    logger.warning(f"‚ö†Ô∏è –£ –º–∞—Ç—á–∞ {match_id} –Ω–µ—Ç begin_at")
                    continue

                try:
                    start_time = datetime.fromisoformat(begin_at.replace("Z", "+00:00"))
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ begin_at –¥–ª—è –º–∞—Ç—á–∞ {match_id}: {e}")
                    continue

                minutes_to_start = (start_time - now).total_seconds() / 60
                logger.info(f"‚è≥ –î–æ –Ω–∞—á–∞–ª–∞ –º–∞—Ç—á–∞ {match_id}: {minutes_to_start:.2f} –º–∏–Ω")

                if -5 <= minutes_to_start <= 5:
                    text = (
                        f"üîî –°–∫–æ—Ä–æ –Ω–∞—á–Ω—ë—Ç—Å—è –º–∞—Ç—á!\n\n"
                        f"üü£ {match['league']} | {match['tournament']}\n"
                        f"üÜö {match['teams']}\n"
                        f"‚è≥ {match['time_until']}\n"
                        f"üñ• {match['stream_url']}"
                    )

                    for user_id in subs_by_tier.get(tier, []):
                        notified_set = get_notified_match_ids(user_id)
                        already_notified = match_id in notified_set

                        if already_notified:
                            logger.info(f"üîÅ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ —É–≤–µ–¥–æ–º–ª—ë–Ω –æ –º–∞—Ç—á–µ {match_id}")
                            continue

                        try:
                            await bot.send_message(chat_id=user_id, text=text)
                            mark_notified(user_id, match_id)
                            logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –æ –º–∞—Ç—á–µ {match_id}")
                        except Exception as e:
                            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                else:
                    logger.info(f"‚è≠ –ú–∞—Ç—á {match_id} –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø–æ–∑–∂–µ (>{minutes_to_start:.2f} –º–∏–Ω.)")

    except Exception as e:
        logger.error(f"üî• –û—à–∏–±–∫–∞ –≤ notify_upcoming_matches: {e}")

# –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫
if __name__ == "__main__":
    from telegram import Bot

    TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
    INTERVAL = int(os.getenv("NOTIFY_INTERVAL_SECONDS", 60))

    bot = Bot(token=TELEGRAM_BOT_TOKEN)

    async def main():
        while True:
            await notify_upcoming_matches(bot)
            await asyncio.sleep(INTERVAL)

    asyncio.run(main())