import os
import asyncio
import logging
from telegram import InlineKeyboardButton, InlineKeyboardMarkup  # –î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∫–Ω–æ–ø–∫–∞–º–∏
from datetime import datetime, timezone
from dotenv import load_dotenv

# –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π —Ä–∞–±–æ—Ç—ã —Å –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º–∏ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
from db import (
    get_all_subscribers,
    get_notified_match_ids,
    mark_notified,
    get_subscriber_tier
)

# –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–∞—Ç—á–µ–π
from utils.pandascore import get_upcoming_cs2_matches

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
load_dotenv()

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –¥–ª—è –ª–æ–≥–æ–≤, –µ—Å–ª–∏ –æ–Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
os.makedirs("logs", exist_ok=True)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
from utils.logging_config import setup_logging
setup_logging()

logger = logging.getLogger(__name__)

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏: –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –º–∞—Ç—á–∞—Ö
async def notify_upcoming_matches(bot):
    try:
        logger.info("üîç –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–∞—Ç—á–µ–π...")

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∏–∑ –±–∞–∑—ã
        subscribers = get_all_subscribers()
        logger.info(f"üë• –ù–∞–π–¥–µ–Ω–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {len(subscribers)}")

        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –ø–æ –∏—Ö —É—Ä–æ–≤–Ω—é –ø–æ–¥–ø–∏—Å–∫–∏ (tier)
        subs_by_tier = {"sa": [], "all": []}
        for user_id in subscribers:
            tier = get_subscriber_tier(user_id)  # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç 'sa' –∏–ª–∏ 'all'
            subs_by_tier.setdefault(tier, []).append(user_id)
            logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏–º–µ–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É {tier}")

        logger.info(f"S/A –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {len(subs_by_tier.get('sa', []))}, ALL –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {len(subs_by_tier.get('all', []))}")

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–∞—Ç—á–µ–π –æ—Ç–¥–µ–ª—å–Ω–æ –¥–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã tier
        matches_by_tier = {
            "sa": await get_upcoming_cs2_matches(limit=10, tier="sa"),
            "all": await get_upcoming_cs2_matches(limit=10, tier="all")
        }

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ UTC-–≤—Ä–µ–º—è
        now = datetime.now(timezone.utc)
        logger.info(f"üïí –¢–µ–∫—É—â–µ–µ UTC –≤—Ä–µ–º—è: {now.isoformat()}")

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–∞—Ç—á–∏ –ø–æ –∫–∞–∂–¥–æ–º—É tier
        for tier, matches in matches_by_tier.items():
            logger.info(f"üì¶ –ü–æ–ª—É—á–µ–Ω–æ {len(matches)} –º–∞—Ç—á–µ–π –¥–ª—è tier={tier}")
            for match in matches:
                match_id = match.get("id")
                begin_at = match.get("begin_at")

                logger.info(f"[{tier.upper()}] –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞—Ç—á–∞ {match_id} | –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {begin_at}")
                logger.debug(f"–ú–∞—Ç—á: {match}")

                # –ï—Å–ª–∏ –Ω–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                if not begin_at:
                    logger.warning(f"‚ö†Ô∏è –£ –º–∞—Ç—á–∞ {match_id} –Ω–µ—Ç begin_at")
                    continue

                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞ –≤ –æ–±—ä–µ–∫—Ç datetime
                try:
                    start_time = datetime.fromisoformat(begin_at.replace("Z", "+00:00"))
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ begin_at –¥–ª—è –º–∞—Ç—á–∞ {match_id}: {e}")
                    continue

                # –°—á–∏—Ç–∞–µ–º, —Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ –Ω–∞—á–∞–ª–∞ –º–∞—Ç—á–∞
                minutes_to_start = (start_time - now).total_seconds() / 60
                logger.info(f"‚è≥ –î–æ –Ω–∞—á–∞–ª–∞ –º–∞—Ç—á–∞ {match_id}: {minutes_to_start:.2f} –º–∏–Ω")

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –º–∞—Ç—á —Å–∫–æ—Ä–æ –Ω–∞—á–Ω—ë—Ç—Å—è (–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö [-6, +5] –º–∏–Ω—É—Ç)
                if -6 <= minutes_to_start <= 5:
                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
                    league = match.get("league", "–ë–µ–∑ –ª–∏–≥–∏")
                    tournament = match.get("tournament", "–ë–µ–∑ —Ç—É—Ä–Ω–∏—Ä–∞")
                    teams = match.get("teams", "–ö–æ–º–∞–Ω–¥—ã –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã")
                    stream_url = match.get("stream_url")
                    time_until = match.get("time_until", "–≤—Ä–µ–º—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–Ω–æ–ø–∫—É
                    if stream_url and stream_url.startswith("http"):
                        text = (
                            f"<b>üîî –°–∫–æ—Ä–æ –Ω–∞—á–Ω—ë—Ç—Å—è –º–∞—Ç—á!</b>\n"
                            f"<b>–¢—É—Ä–Ω–∏—Ä:</b> {league} | {tournament}\n"
                            f"<b>–ù–∞—á–Ω—ë—Ç—Å—è —á–µ—Ä–µ–∑:</b> {time_until}"
                        )
                        keyboard = InlineKeyboardMarkup(inline_keyboard=[
                            [InlineKeyboardButton(text=f"üü™ {teams}", url=stream_url)]
                        ])
                    else:
                        text = (
                            f"<b>üîî –°–∫–æ—Ä–æ –Ω–∞—á–Ω—ë—Ç—Å—è –º–∞—Ç—á!</b>\n"
                            f"<b>–¢—É—Ä–Ω–∏—Ä:</b> {league} | {tournament}\n"
                            f"<b>–ú–∞—Ç—á:</b> {teams}\n"
                            f"<b>–ù–∞—á–Ω—ë—Ç—Å—è —á–µ—Ä–µ–∑:</b> {time_until}\n"
                            f"‚ö†Ô∏è <i>–¢—Ä–∞–Ω—Å–ª—è—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç</i>"
                        )
                        keyboard = None

                    # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –Ω—É–∂–Ω–æ–≥–æ tier
                    for user_id in subs_by_tier.get(tier, []):
                        notified_set = get_notified_match_ids(user_id)
                        already_notified = match_id in notified_set

                        if already_notified:
                            logger.info(f"üîÅ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ —É–≤–µ–¥–æ–º–ª—ë–Ω –æ –º–∞—Ç—á–µ {match_id}")
                            continue

                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                        try:
                            await bot.send_message(
                                chat_id=user_id,
                                text=text,
                                parse_mode="HTML",
                                reply_markup=keyboard
                            )
                            # –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
                            mark_notified(user_id, match_id)
                            logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –æ –º–∞—Ç—á–µ {match_id}")
                        except Exception as e:
                            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                else:
                    logger.info(f"‚è≠ –ú–∞—Ç—á {match_id} –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø–æ–∑–∂–µ (>{minutes_to_start:.2f} –º–∏–Ω.)")

    except Exception as e:
        logger.error(f"üî• –û—à–∏–±–∫–∞ –≤ notify_upcoming_matches: {e}")

# –ï—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é ‚Äî –∑–∞–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
if __name__ == "__main__":
    from telegram import Bot

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω Telegram –∏–∑ .env
    TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

    # –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ –º–∞—Ç—á–µ–π (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
    INTERVAL = int(os.getenv("NOTIFY_INTERVAL_SECONDS", 60))

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram-–±–æ—Ç–∞
    bot = Bot(token=TELEGRAM_BOT_TOKEN)

    # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª ‚Äî –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º notify_upcoming_matches —Å –ø–∞—É–∑–æ–π
    async def main():
        while True:
            await notify_upcoming_matches(bot)
            await asyncio.sleep(INTERVAL)

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª —Å–æ–±—ã—Ç–∏–π
    asyncio.run(main())