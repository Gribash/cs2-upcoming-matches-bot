import os
import asyncio
import logging
from datetime import datetime, timedelta, timezone
from dotenv import load_dotenv
from db import get_all_subscribers, get_notified_match_ids, mark_notified
from utils.pandascore import get_upcoming_cs2_matches

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
USE_MOCK = os.getenv("USE_MOCK_DATA", "false").lower() == "true"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
os.makedirs("logs", exist_ok=True)
logging.basicConfig(
    filename="logs/notifications.log",
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
)

logger = logging.getLogger(__name__)

# –ú–æ–∫-–¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
async def get_mock_upcoming_matches():
    start_time = datetime.now(timezone.utc) + timedelta(minutes=1)
    begin_at_iso = start_time.isoformat()

    return [
        {
            "id": 999001,
            "teams": "Team Alpha vs Team Beta",
            "league": "Test League",
            "tournament": "Test Cup",
            "time_until": "–ù–∞—á–Ω—ë—Ç—Å—è —á–µ—Ä–µ–∑ 1 –º–∏–Ω.",
            "stream_url": "https://twitch.tv/test_stream",
            "begin_at": begin_at_iso
        }
    ]

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
async def notify_upcoming_matches(bot):
    try:
        logger.info("–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–∞—Ç—á–µ–π...")

        matches = await (get_mock_upcoming_matches() if USE_MOCK else get_upcoming_cs2_matches(limit=10))
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ –º–∞—Ç—á–µ–π: {len(matches)}")

        subscribers = get_all_subscribers()
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {len(subscribers)}")

        now = datetime.now(timezone.utc)
        logger.info(f"–¢–µ–∫—É—â–µ–µ UTC –≤—Ä–µ–º—è: {now.isoformat()}")

        for match in matches:
            match_id = match.get("id")
            begin_at = match.get("begin_at")

            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞—Ç—á–∞ {match_id} | –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {begin_at}")

            if not begin_at:
                logger.warning(f"–£ –º–∞—Ç—á–∞ {match_id} –Ω–µ—Ç begin_at")
                continue

            try:
                start_time = datetime.fromisoformat(begin_at.replace("Z", "+00:00"))
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –≤—Ä–µ–º–µ–Ω–∏ begin_at –¥–ª—è –º–∞—Ç—á–∞ {match_id}: {e}")
                continue

            minutes_to_start = (start_time - now).total_seconds() / 60
            logger.info(f"–î–æ –Ω–∞—á–∞–ª–∞ –º–∞—Ç—á–∞ {match_id}: {minutes_to_start:.2f} –º–∏–Ω—É—Ç")

            if -5 <= minutes_to_start <= 5:
                text = (
                    f"üîî –°–∫–æ—Ä–æ –Ω–∞—á–Ω—ë—Ç—Å—è –º–∞—Ç—á!\n\n"
                    f"üü£ {match['league']} | {match['tournament']}\n"
                    f"üÜö {match['teams']}\n"
                    f"‚è≥ {match['time_until']}\n"
                    f"üñ• {match['stream_url']}"
                )

                for user_id in subscribers:
                    notified_set = get_notified_match_ids(user_id)
                    already_notified = match_id in notified_set

                    if already_notified:
                        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ —É–≤–µ–¥–æ–º–ª—ë–Ω –æ –º–∞—Ç—á–µ {match_id}")
                        continue

                    try:
                        await bot.send_message(chat_id=user_id, text=text)
                        mark_notified(user_id, match_id)
                        logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –æ –º–∞—Ç—á–µ {match_id}")
                    except Exception as e:
                        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            else:
                logger.info(f"–ú–∞—Ç—á {match_id} –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–µ —Å–∫–æ—Ä–æ (>{minutes_to_start:.2f} –º–∏–Ω.)")

    except Exception as e:
        logger.error(f"üî• –û—à–∏–±–∫–∞ –≤ notify_upcoming_matches: {e}")

# –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫
if __name__ == "__main__":
    from telegram import Bot

    TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
    INTERVAL = int(os.getenv("NOTIFY_INTERVAL_SECONDS", 60))

    bot = Bot(token=TELEGRAM_BOT_TOKEN)

    async def main():
        while True:
            await notify_upcoming_matches(bot)
            await asyncio.sleep(INTERVAL)

    asyncio.run(main())