import os
import asyncio
import logging
from datetime import datetime, timezone
from telegram import Bot
from telegram.error import Forbidden
from dotenv import load_dotenv

from bot.db import (
    get_all_subscribers,
    get_notified_match_ids,
    mark_notified_bulk,
    update_is_active,
    get_subscriber_tier,
    get_subscriber_language,
)
from utils.matches_cache_reader import get_matches
from utils.logging_config import setup_logging
from utils.form_match_card import build_match_card
from utils.translations import t

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
os.makedirs("logs", exist_ok=True)
setup_logging()
logger = logging.getLogger("notifications")
logger.setLevel(logging.DEBUG if os.getenv("DEV_MODE") == "true" else logging.INFO)

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
INTERVAL = int(os.getenv("NOTIFY_INTERVAL_SECONDS", 60))
bot = Bot(token=TELEGRAM_BOT_TOKEN)


# --- –†–∞—Å—Å—ã–ª–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ---
async def send(user_id, match_id, match_name, message, keyboard, successful_notifications):
    try:
        await bot.send_message(chat_id=user_id, text=message, parse_mode="HTML", reply_markup=keyboard)
        logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {user_id} -> {match_name} ({match_id})")
        successful_notifications.append((user_id, match_id))
        logger.debug(f"üìù –î–æ–±–∞–≤–ª–µ–Ω–æ –∫ –∑–∞–ø–∏—Å–∏: {user_id} -> –º–∞—Ç—á {match_id}")
    except Forbidden:
        logger.warning(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞. –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ.")
        update_is_active(user_id, False)
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")


# --- –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ---
async def notify_upcoming_matches():
    try:
        logger.debug("üîç –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–∞—Ç—á–µ–π...")

        subscribers = get_all_subscribers() or []
        logger.debug(f"üë• –ù–∞–π–¥–µ–Ω–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {len(subscribers)}")

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ tier
        tier_by_user = {
            user_id: get_subscriber_tier(user_id) or "all"
            for user_id in subscribers
        }

        subs_by_tier = {"sa": [], "all": []}
        for user_id, tier in tier_by_user.items():
            tier = tier if tier in ["sa", "all"] else "all"
            subs_by_tier[tier].append(user_id)

        logger.debug(f"S/A: {len(subs_by_tier['sa'])}, ALL: {len(subs_by_tier['all'])}")

        # –£–∂–µ —É–≤–µ–¥–æ–º–ª—ë–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        notified_ids_by_user = {
            user_id: set(get_notified_match_ids(user_id))
            for user_id in subscribers
        }

        now = datetime.now(timezone.utc)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–∞—Ç—á–∏ –∏–∑ –∫—ç—à–∞
        matches_by_tier = {
            "sa": get_matches(status="upcoming", tier="sa", limit=20),
            "all": get_matches(status="upcoming", tier="all", limit=20),
        }

        successful_notifications = []

        # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –º–∞—Ç—á–∞–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ tier
        for tier, matches in matches_by_tier.items():
            for match in matches:
                match_id = match.get("id")
                begin_at = match.get("begin_at")

                if not begin_at:
                    logger.warning(f"‚ö†Ô∏è –ù–µ—Ç begin_at —É –º–∞—Ç—á–∞ {match_id}")
                    continue

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞ –º–∞—Ç—á–∞
                try:
                    start_time = datetime.fromisoformat(begin_at.replace("Z", "+00:00"))
                except Exception as e:
                    logger.warning(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏: {e}")
                    continue

                # –°—á–∏—Ç–∞–µ–º –º–∏–Ω—É—Ç—ã –¥–æ –Ω–∞—á–∞–ª–∞
                minutes_to_start = (start_time - now).total_seconds() / 60

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫–Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (-5/+5 –º–∏–Ω—É—Ç –æ—Ç –Ω–∞—á–∞–ª–∞)
                if -5 <= minutes_to_start <= 5:
                    match_name = match.get("name", "?")

                    tasks = []

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    for user_id in subs_by_tier.get(tier, []):
                        if match_id in notified_ids_by_user.get(user_id, set()):
                            logger.debug(f"üîÅ –£–∂–µ —É–≤–µ–¥–æ–º–ª—ë–Ω: {user_id} -> –º–∞—Ç—á {match_id}")
                            continue

                        # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        lang = get_subscriber_language(user_id)

                        # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞–ª–∏—á–∏–µ stream_url
                        stream_url = match.get("stream_url")
                        if stream_url:
                            logger.debug(f"üé• –ú–∞—Ç—á {match_id}: stream_url –Ω–∞–π–¥–µ–Ω -> {stream_url}")
                        else:
                            logger.debug(f"üö´ –ú–∞—Ç—á {match_id}: stream_url –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")

                        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
                        message, keyboard = build_match_card(
                            match,
                            stream_button=True,
                            lang=lang
                        )

                        prefix = t("prefix_starting", lang)
                        final_message = prefix + message

                        tasks.append(send(user_id, match_id, match_name, final_message, keyboard, successful_notifications))

                    # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
                    await asyncio.gather(*tasks)

                    # –û—Ç–º–µ—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –±–∞–∑–µ
                    if successful_notifications:
                        logger.info(f"üíæ –û—Ç–º–µ—á–µ–Ω–æ {len(successful_notifications)} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –±–∞–∑–µ.")
                        mark_notified_bulk(successful_notifications)
                else:
                    logger.debug(f"‚è≠ –ú–∞—Ç—á {match_id} –Ω–µ –ø–æ–ø–∞–¥–∞–µ—Ç –≤ –æ–∫–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")

    except Exception as e:
        logger.exception(f"üî• –û—à–∏–±–∫–∞ –≤ notify_upcoming_matches: {e}")


# --- –¶–∏–∫–ª–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ ---
async def main():
    while True:
        await notify_upcoming_matches()
        await asyncio.sleep(INTERVAL)


if __name__ == "__main__":
    asyncio.run(main())