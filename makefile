# ==== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ====
PROJECT_DIR := $(shell pwd)
ENV_FILE := .env
SSH_USER := root
SSH_HOST := cs2-vps
SSH_PATH := /root/cs2-bot
DEPLOY_SCRIPT := deploy.sh

# ==== –õ–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ ====

run:
	docker-compose --env-file $(ENV_FILE) up --build

stop:
	docker-compose down

logs:
	docker-compose logs -f

shell:
	docker exec -it $$(docker ps -qf "name=cs2_bot") bash

env-check:
	@cat $(ENV_FILE)

# ==== –†–∞–±–æ—Ç–∞ —Å git ====

create-feature:
ifndef name
	$(error ‚ùå –£–∫–∞–∂–∏ –∏–º—è —Ñ–∏—á–∏: make create-feature name=–Ω–∞–∑–≤–∞–Ω–∏–µ)
endif
	git checkout -b feature/$(name)

push-dev:
	git checkout dev
	git add .
	git commit -m "‚öôÔ∏è WIP: —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞"
	git push origin dev

merge-dev:
	git checkout main
	git merge dev
	git push origin main

pull-main:
	git checkout main
	git pull origin main

push-main:
	git checkout main
	git add .
	git commit -m "üöÄ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞"
	git push origin main

# ==== –î–µ–ø–ª–æ–π ====

upload-deploy:
	scp deploy.sh $(SSH_USER)@$(SSH_HOST):$(SSH_PATH)/deploy.sh
	ssh $(SSH_USER)@$(SSH_HOST) "chmod +x $(SSH_PATH)/deploy.sh"

deploy: upload-deploy
	@echo "üöÄ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –¥–µ–ø–ª–æ–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä $(SSH_HOST)..."
	ssh $(SSH_USER)@$(SSH_HOST) 'cd $(SSH_PATH) && ./$(DEPLOY_SCRIPT)'
	@echo "üìÑ –õ–æ–≥–∏ –¥–µ–ø–ª–æ—è –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –∫–∞—Ç–∞–ª–æ–≥–µ /root/cs2-bot_deploys/"

sync-prod: pull-main merge-dev deploy

# ==== –£—Ç–∏–ª–∏—Ç—ã ====

status:
	git status

branches:
	git branch -a

whoami:
	@echo "–ü—Ä–æ–µ–∫—Ç: $(PROJECT_DIR)"

.PHONY: run stop logs shell env-check create-feature push-dev merge-dev pull-main push-main deploy sync-prod status branches whoami

clear-logs:
	ssh $(SSH_USER)@$(SSH_HOST) 'cd $(SSH_PATH)/logs && rm -f *.log *.err.log *.out.log'

get-logs:
	rm -rf ./logs
	scp -r $(SSH_USER)@$(SSH_HOST):$(SSH_PATH)/logs ./logs

get-data:
	rm -f ./data
	scp $(SSH_USER)@$(SSH_HOST):$(SSH_PATH)/data/subscribers.db ./data

get-cache:
	rm -rf ./cache
	scp -r $(SSH_USER)@$(SSH_HOST):$(SSH_PATH)/cache ./cache

refresh-cache:
	ssh $(SSH_USER)@$(SSH_HOST) '\
		cd $(SSH_PATH) && \
		rm -rf cache/* && \
		docker-compose exec -T bot python utils/refresh_cache.py \
	'

# ‚úÖ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
test:
	pytest tests/ -v --color=yes --tb=short

# ‚úÖ –ü–æ–∫—Ä—ã—Ç–∏–µ –∫–æ–¥–∞ (coverage) –ø–æ –º–æ–¥—É–ª—è–º bot –∏ utils
coverage:
	pytest --cov=bot --cov=utils tests/ --cov-report=term-missing