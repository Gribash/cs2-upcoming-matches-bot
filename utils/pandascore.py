import os
import logging
import httpx
from datetime import datetime, timezone, timedelta
from dotenv import load_dotenv

load_dotenv()

PANDASCORE_TOKEN = os.getenv("PANDASCORE_TOKEN")
BASE_URL = "https://api.pandascore.co"
HEADERS = {
    "Authorization": f"Bearer {PANDASCORE_TOKEN}"
}

logger = logging.getLogger("tournaments")

TIERS = ["s", "a", "b", "c", "d"]
TIERS_QUERY = ",".join(TIERS)

async def fetch_all_tournaments():
    tournaments = []
    endpoints = ["running", "upcoming"]
    includes = "matches,teams,league,serie"

    async with httpx.AsyncClient(timeout=30.0) as client:
        for endpoint in endpoints:
            page = 1
            while True:
                url = (
                    f"{BASE_URL}/csgo/tournaments/{endpoint}"
                    f"?page={page}&per_page=100"
                    f"&filter[tier]={TIERS_QUERY}"
                    f"&include={includes}"
                )
                logger.debug(f"üì° –ó–∞–ø—Ä–æ—Å: {url}")
                r = await client.get(url, headers=HEADERS)

                if r.status_code != 200:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ {endpoint} (—Å—Ç—Ä. {page}): {r.status_code}")
                    break

                data = r.json()
                if not data:
                    break

                for t in data:
                    league = t.get("league") or {}
                    serie = t.get("serie") or {}
                    teams = t.get("teams", [])
                    matches_raw = t.get("matches", [])

                    # üß† –ù–æ–≤—ã–π –∫–æ–¥ ‚Äî —Å–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã
                    # üß† –ù–æ–≤—ã–π –∫–æ–¥ ‚Äî —Å–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –ø–æ ID
                    teams_by_id = {team["id"]: team for team in teams if team.get("id")}

                    matches = []
                    for m in matches_raw:
                        stream_url = extract_stream_url(m.get("streams_list", []))
                        opponents = m.get("opponents", [])

                        team_1 = {}
                        team_2 = {}

                        # –û–ø–ø–æ–Ω–µ–Ω—Ç 1
                        if len(opponents) > 0 and isinstance(opponents[0], dict):
                            opp1 = opponents[0].get("opponent")
                            if isinstance(opp1, dict):
                                team_1 = teams_by_id.get(opp1.get("id"), {})

                        # –û–ø–ø–æ–Ω–µ–Ω—Ç 2
                        if len(opponents) > 1 and isinstance(opponents[1], dict):
                            opp2 = opponents[1].get("opponent")
                            if isinstance(opp2, dict):
                                team_2 = teams_by_id.get(opp2.get("id"), {})

                        # üîç –õ–æ–≥–∏—Ä—É–µ–º –Ω–µ—Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
                        if not team_1 or not team_2:
                            logger.warning(f"‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–ø–æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –º–∞—Ç—á–∞ {m.get('name')} (ID: {m.get('id')})")

                        matches.append({
                            "id": m["id"],
                            "name": m.get("name"),
                            "status": m.get("status"),
                            "begin_at": m.get("begin_at"),
                            "scheduled_at": m.get("scheduled_at"),
                            "stream_url": stream_url,
                            "team_1": {
                                "id": team_1.get("id"),
                                "name": team_1.get("name"),
                                "acronym": team_1.get("acronym")
                            },
                            "team_2": {
                                "id": team_2.get("id"),
                                "name": team_2.get("name"),
                                "acronym": team_2.get("acronym")
                            }
                        })

                page += 1

    logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(tournaments)} —Ç—É—Ä–Ω–∏—Ä–æ–≤ —Å –º–∞—Ç—á–∞–º–∏, –∫–æ–º–∞–Ω–¥–∞–º–∏, –ª–∏–≥–∞–º–∏ –∏ —Å–µ—Ä–∏—è–º–∏")
    return tournaments

def extract_stream_url(streams_list: list) -> str | None:
    if not isinstance(streams_list, list):
        return None

    # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—É—é –æ—Å–Ω–æ–≤–Ω—É—é —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—é
    for stream in streams_list:
        if isinstance(stream, dict) and stream.get("main") and stream.get("raw_url"):
            return stream["raw_url"]

    # –ó–∞—Ç–µ–º ‚Äî –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–≤—É—é —Å raw_url
    for stream in streams_list:
        if isinstance(stream, dict) and stream.get("raw_url"):
            return stream["raw_url"]

    return None

# –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –¥–æ –Ω–∞—á–∞–ª–∞ –º–∞—Ç—á–∞.
# –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ match_cacher.py –∏ notifications.py

def format_time_until(start_time_iso: str) -> str:
    try:
        start_time = datetime.fromisoformat(start_time_iso.replace("Z", "+00:00"))
        now = datetime.now(timezone.utc)
        delta = start_time - now

        if delta.total_seconds() < 0:
            return "‚è± –£–∂–µ –Ω–∞—á–∞–ª—Å—è"

        days = delta.days
        hours, remainder = divmod(delta.seconds, 3600)
        minutes = remainder // 60

        parts = []
        if days > 0:
            parts.append(f"{days} –¥–Ω.")
        if hours > 0:
            parts.append(f"{hours} —á.")
        if minutes > 0:
            parts.append(f"{minutes} –º–∏–Ω.")

        return " ".join(parts) if parts else "–ù–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç"
    except Exception:
        return "–í—Ä–µ–º—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"