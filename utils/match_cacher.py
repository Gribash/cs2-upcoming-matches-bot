import asyncio
import logging
import sys

from utils.logging_config import setup_logging
from utils.cache_writer import write_json_to_cache, MATCHES_CACHE_NAME
from utils.pandascore import fetch_all_matches

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
setup_logging()
logger = logging.getLogger("match_cacher")

# –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
CACHE_INTERVAL_SECONDS = 600  # 10 –º–∏–Ω—É—Ç

async def cache_matches_loop(once=False):
    while True:
        try:
            logger.info("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –º–∞—Ç—á–µ–π –∏–∑ PandaScore (running + upcoming)...")
            match_data = await fetch_all_matches()
            write_json_to_cache(MATCHES_CACHE_NAME, match_data)
            logger.info(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(match_data['matches'])} –º–∞—Ç—á–µ–π –≤ –∫—ç—à.")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫—ç—à–∞ –º–∞—Ç—á–µ–π: {e}", exc_info=True)

        if once:
            break

        await asyncio.sleep(CACHE_INTERVAL_SECONDS)


if __name__ == "__main__":
    once_flag = "--once" in sys.argv
    asyncio.run(cache_matches_loop(once=once_flag))