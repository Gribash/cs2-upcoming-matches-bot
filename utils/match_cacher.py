import os
import asyncio
import logging
import json 
from datetime import datetime, timezone
from dotenv import load_dotenv

from utils.pandascore import fetch_all_matches, extract_stream_url, format_time_until
from utils.tournament_cache_reader import load_tournaments_from_cache
from utils.cache_writer import write_json_to_cache
from utils.logging_config import setup_logging

# –ó–∞–≥—Ä—É–∑–∫–∞ .env
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
os.makedirs("logs", exist_ok=True)
setup_logging()
logger = logging.getLogger("matches")
logger.setLevel(logging.INFO)

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
CACHE_FILENAME = "matches.json"
INTERVAL_SECONDS = 600  # 10 –º–∏–Ω—É—Ç

async def update_match_cache():
    try:
        logger.info("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –º–∞—Ç—á–µ–π –ø–æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ç—É—Ä–Ω–∏—Ä–∞–º...")

        tournaments = load_tournaments_from_cache()
        tournament_ids = [t["id"] for t in tournaments if isinstance(t, dict) and t.get("status") in ["running", "upcoming"]]

        if not tournament_ids:
            logger.warning("‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—Ç—á–µ–π.")
            return

        logger.debug(f"üìã –¢—É—Ä–Ω–∏—Ä—ã: {tournament_ids}")

        matches_raw = await fetch_all_matches(tournament_ids)
        logger.info(f"üì• –ó–∞–≥—Ä—É–∂–µ–Ω–æ –º–∞—Ç—á–µ–π: {len(matches_raw)}")
       
        if matches_raw:
            logger.info(f"üî¨ –ü—Ä–∏–º–µ—Ä streams: {json.dumps(matches_raw[0].get('streams', []), indent=2)}")

        simplified = []
        for m in matches_raw:
            begin_at = m.get("begin_at")
            stream_url = extract_stream_url(m.get("streams", []))

            opponents = [
                {
                    "name": opp["opponent"].get("name"),
                    "acronym": opp["opponent"].get("acronym")
                }
                for opp in m.get("opponents", [])
                if opp.get("opponent") and opp["opponent"].get("name")
            ]

            simplified.append({
                "id": m.get("id"),
                "tournament_id": m.get("tournament_id"),
                "tournament_name": m.get("tournament", {}).get("name"),
                "league_name": m.get("league", {}).get("name"),
                "begin_at": begin_at,
                "time_until": format_time_until(begin_at) if begin_at else None,
                "status": m.get("status"),
                "stream_url": stream_url,
                "winner_id": m.get("winner_id"),
                "opponents": opponents
            })

        cache_payload = {
            "updated_at": datetime.now(timezone.utc).isoformat(),
            "matches": simplified
        }

        write_json_to_cache(CACHE_FILENAME, cache_payload)
        logger.info(f"‚úÖ –ö—ç—à –º–∞—Ç—á–µ–π –æ–±–Ω–æ–≤–ª—ë–Ω: {len(simplified)} –∑–∞–ø–∏—Å–µ–π")
        logger.info(f"üïí –í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞: {cache_payload['updated_at']}")

    except Exception as e:
        logger.exception(f"üî• –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–∞—Ç—á–µ–π: {e}")

# –¶–∏–∫–ª —Å –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—ã–º –ø–µ—Ä–≤—ã–º –∑–∞–ø—É—Å–∫–æ–º
async def run_periodic_update():
    while True:
        await update_match_cache()
        await asyncio.sleep(INTERVAL_SECONDS)

if __name__ == "__main__":
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–∞—Ç—á–µ–π (—Ü–∏–∫–ª)")
    asyncio.run(run_periodic_update())