import os
import asyncio
import logging
from datetime import datetime, timezone
from dotenv import load_dotenv

from utils.pandascore import fetch_all_tournaments
from utils.cache_writer import write_json_to_cache
from utils.logging_config import setup_logging

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
os.makedirs("logs", exist_ok=True)
setup_logging()
logger = logging.getLogger("tournaments")
logger.setLevel(logging.INFO)

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
CACHE_FILENAME = "tournaments.json"
INTERVAL_SECONDS = 1800  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ (30 –º–∏–Ω—É—Ç)

async def update_tournaments_cache():
    try:
        logger.info("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ —Ç—É—Ä–Ω–∏—Ä–æ–≤...")

        result = await fetch_all_tournaments()
        if not result or not result.get("tournaments"):
            logger.warning("‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Ç—É—Ä–Ω–∏—Ä–æ–≤")
            return

        write_json_to_cache(CACHE_FILENAME, result)
        logger.info(f"‚úÖ –ö—ç—à —Ç—É—Ä–Ω–∏—Ä–æ–≤ –æ–±–Ω–æ–≤–ª—ë–Ω ({len(result['tournaments'])} —à—Ç.)")

    except Exception as e:
        logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç—É—Ä–Ω–∏—Ä–æ–≤: {e}")

async def run_periodic_update():
    while True:
        await update_tournaments_cache()
        await asyncio.sleep(INTERVAL_SECONDS)

if __name__ == "__main__":
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–æ–≤ (—Ü–∏–∫–ª)")
    asyncio.run(run_periodic_update())