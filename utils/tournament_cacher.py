import os
import asyncio
import logging
from datetime import datetime
from dotenv import load_dotenv

from utils.pandascore import fetch_all_tournaments
from utils.cache_writer import write_json_to_cache

# –ó–∞–≥—Ä—É–∑–∫–∞ .env
load_dotenv()

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
os.makedirs("logs", exist_ok=True)
tournaments_logger = logging.getLogger("tournaments")
tournaments_logger.setLevel(logging.INFO)
tournaments_logger.propagate = False

file_handler = logging.FileHandler("logs/tournaments.log")
formatter = logging.Formatter("%(asctime)s [%(levelname)s] %(message)s")
file_handler.setFormatter(formatter)
tournaments_logger.addHandler(file_handler)

# --- –ü–∞—Ä–∞–º–µ—Ç—Ä—ã ---
CACHE_FILENAME = "tournaments.json"
INTERVAL_SECONDS = 3600  # –∑–∞–ø—É—Å–∫ —Ä–∞–∑ –≤ —á–∞—Å

# --- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–æ–≤ ---
async def update_tournaments():
    try:
        tournaments_logger.info("‚è≥ –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–æ–≤...")

        tournaments = await fetch_all_tournaments()
        tournaments_logger.info(f"üì• –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ç—É—Ä–Ω–∏—Ä–æ–≤: {len(tournaments)}")

        write_json_to_cache(CACHE_FILENAME, tournaments)
        tournaments_logger.info(f"‚úÖ –ö—ç—à —Ç—É—Ä–Ω–∏—Ä–æ–≤ –æ–±–Ω–æ–≤–ª—ë–Ω: {len(tournaments)} –∑–∞–ø–∏—Å–µ–π")

    except Exception as e:
        tournaments_logger.exception(f"üî• –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç—É—Ä–Ω–∏—Ä–æ–≤: {e}")

# --- –¶–∏–∫–ª —Å –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—ã–º –ø–µ—Ä–≤—ã–º –∑–∞–ø—É—Å–∫–æ–º ---
async def run_periodic_update():
    while True:
        await update_tournaments()
        await asyncio.sleep(INTERVAL_SECONDS)

# --- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ---
if __name__ == "__main__":
    tournaments_logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–æ–≤ (—Ü–∏–∫–ª)")
    asyncio.run(run_periodic_update())