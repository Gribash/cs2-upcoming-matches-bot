import os
import asyncio
import logging
from datetime import datetime, timezone
from dotenv import load_dotenv

from utils.pandascore import fetch_all_tournaments
from utils.cache_writer import write_json_to_cache
from utils.logging_config import setup_logging

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
os.makedirs("logs", exist_ok=True)
setup_logging()
logger = logging.getLogger("tournaments")
logger.setLevel(logging.INFO)

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
CACHE_FILENAME = "tournaments.json"
INTERVAL_SECONDS = 3600  # 1 —á–∞—Å

async def update_tournament_cache():
    try:
        logger.info("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ —Ç—É—Ä–Ω–∏—Ä–æ–≤...")

        tournaments_raw = await fetch_all_tournaments()
        logger.info(f"üì• –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ç—É—Ä–Ω–∏—Ä–æ–≤: {len(tournaments_raw)}")

        simplified = [
            {
                "id": t["id"],
                "name": t["name"],
                "slug": t.get("slug"),
                "tier": t.get("tier"),
                "status": t.get("status"),
                "league_id": t.get("league_id"),
                "league_name": t.get("league", {}).get("name")
            }
            for t in tournaments_raw
        ]

        cache_payload = {
            "updated_at": datetime.now(timezone.utc).isoformat(),
            "tournaments": simplified
        }

        write_json_to_cache(CACHE_FILENAME, cache_payload)
        logger.info(f"‚úÖ –ö—ç—à —Ç—É—Ä–Ω–∏—Ä–æ–≤ –æ–±–Ω–æ–≤–ª—ë–Ω: {len(simplified)} –∑–∞–ø–∏—Å–µ–π")
        logger.info(f"üïí –í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞: {cache_payload['updated_at']}")

    except Exception as e:
        logger.exception(f"üî• –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç—É—Ä–Ω–∏—Ä–æ–≤: {e}")

# –¶–∏–∫–ª —Å –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—ã–º –ø–µ—Ä–≤—ã–º –∑–∞–ø—É—Å–∫–æ–º
async def run_periodic_update():
    while True:
        await update_tournament_cache()
        await asyncio.sleep(INTERVAL_SECONDS)

if __name__ == "__main__":
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–æ–≤ (—Ü–∏–∫–ª)")
    asyncio.run(run_periodic_update())